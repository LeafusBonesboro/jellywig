generator client {
  provider = "prisma-client-js"
}



datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Linked provider tokens (Yahoo, ESPN later, etc.)
  integrations  Integration[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  emailVerified DateTime?
  yahooToken    YahooToken?


}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/** Store external fantasy integrations (Yahoo now; ESPN/Sleeper later) */
model Integration {
  id             String   @id @default(cuid())
  userId         String
  provider       String   // "yahoo"
  accessToken    String   @db.Text
  refreshToken   String   @db.Text
  expiresAt      DateTime
  scope          String?
  leagueKeys     String?  // CSV or JSON of linked league keys (optional)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, provider])
}

model YahooToken {
  id          Int      @id @default(autoincrement())
  userId      String   @unique
  accessToken String
  refreshToken String
  expiresAt   DateTime
  user        User     @relation(fields: [userId], references: [id])
}
